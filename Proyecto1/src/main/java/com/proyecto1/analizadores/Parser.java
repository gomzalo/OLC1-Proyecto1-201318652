
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.proyecto1.analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import com.proyecto1.interfaz.*;
import com.proyecto1.estructuras.arbol.*;
import com.proyecto1.estructuras.pojos.*;
import com.proyecto1.estructuras.abb.*;
import com.proyecto1.estructuras.Instancias;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\004\000\002\004\002\000\002\004\011" +
    "\000\002\004\011\000\002\004\011\000\002\004\011\000" +
    "\002\006\004\000\002\006\003\000\002\007\011\000\002" +
    "\010\003\000\002\010\005\000\002\012\005\000\002\012" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\013" +
    "\004\000\002\013\003\000\002\014\007\000\002\015\005" +
    "\000\002\015\004\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\004\000\002\020\004\000\002\020" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\004\000\002\021\003\000\002\022\004\000\002" +
    "\022\003\000\002\016\004\000\002\016\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\024\004\000\002\024\003\000" +
    "\002\025\006\000\002\026\004\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\004\013\005\001\002\000\004\013\005\001" +
    "\002\000\010\007\013\014\ufffd\022\015\001\002\000\004" +
    "\002\010\001\002\000\004\002\000\001\002\000\004\002" +
    "\001\001\002\000\012\007\ufff7\014\ufff7\022\ufff7\032\ufff7" +
    "\001\002\000\010\007\uffca\022\uffca\032\uffca\001\002\000" +
    "\004\037\141\001\002\000\010\007\013\022\015\032\123" +
    "\001\002\000\004\012\041\001\002\000\004\014\040\001" +
    "\002\000\006\007\013\022\015\001\002\000\012\007\ufff8" +
    "\014\ufff8\022\ufff8\032\ufff8\001\002\000\006\007\013\032" +
    "\022\001\002\000\004\032\024\001\002\000\010\007\uffcb" +
    "\022\uffcb\032\uffcb\001\002\000\004\032\025\001\002\000" +
    "\004\032\026\001\002\000\004\007\027\001\002\000\004" +
    "\012\033\001\002\000\010\007\uffab\014\uffab\022\uffab\001" +
    "\002\000\006\007\027\014\ufffc\001\002\000\010\007\uffac" +
    "\014\uffac\022\uffac\001\002\000\004\010\034\001\002\000" +
    "\006\010\uffa8\011\uffa8\001\002\000\006\010\036\011\037" +
    "\001\002\000\006\010\uffa9\011\uffa9\001\002\000\010\007" +
    "\uffaa\014\uffaa\022\uffaa\001\002\000\004\002\uffff\001\002" +
    "\000\004\007\042\001\002\000\004\037\043\001\002\000" +
    "\004\043\044\001\002\000\112\004\066\006\073\011\075" +
    "\012\051\013\076\014\074\015\111\016\070\017\072\020" +
    "\114\021\047\023\056\026\113\027\054\030\063\031\106" +
    "\032\067\033\050\034\112\035\110\036\107\037\062\040" +
    "\115\041\064\042\057\043\045\044\103\045\055\046\100" +
    "\047\053\050\052\051\071\052\077\053\105\054\046\055" +
    "\061\001\002\000\010\011\uffde\023\uffde\024\uffde\001\002" +
    "\000\026\010\uffd1\011\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1\001\002\000\010" +
    "\011\uffd4\023\uffd4\024\uffd4\001\002\000\010\011\uffec\023" +
    "\uffec\024\uffec\001\002\000\010\011\uffe2\023\uffe2\024\uffe2" +
    "\001\002\000\010\011\uffd8\023\uffd8\024\uffd8\001\002\000" +
    "\010\011\uffd9\023\uffd9\024\uffd9\001\002\000\010\011\ufff0" +
    "\023\ufff0\024\ufff0\001\002\000\010\011\uffdb\023\uffdb\024" +
    "\uffdb\001\002\000\010\011\uffe6\023\uffe6\024\uffe6\001\002" +
    "\000\010\011\uffdf\023\uffdf\024\uffdf\001\002\000\010\011" +
    "\uffcd\023\uffcd\024\uffcd\001\002\000\026\010\uffd0\011\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\001\002\000\010\011\uffe5\023\uffe5\024\uffe5" +
    "\001\002\000\010\011\uffef\023\uffef\024\uffef\001\002\000" +
    "\010\011\uffe0\023\uffe0\024\uffe0\001\002\000\010\011\ufff2" +
    "\023\ufff2\024\121\001\002\000\010\011\uffce\023\uffce\024" +
    "\uffce\001\002\000\010\011\uffed\023\uffed\024\uffed\001\002" +
    "\000\010\011\uffe7\023\uffe7\024\uffe7\001\002\000\010\011" +
    "\uffd7\023\uffd7\024\uffd7\001\002\000\010\011\uffe4\023\uffe4" +
    "\024\uffe4\001\002\000\010\011\uffcf\023\uffcf\024\uffcf\001" +
    "\002\000\010\011\uffd3\023\uffd3\024\uffd3\001\002\000\010" +
    "\011\uffe1\023\uffe1\024\uffe1\001\002\000\010\011\uffd5\023" +
    "\uffd5\024\uffd5\001\002\000\010\011\uffd6\023\uffd6\024\uffd6" +
    "\001\002\000\010\011\uffda\023\uffda\024\uffda\001\002\000" +
    "\004\011\120\001\002\000\010\011\uffcc\023\uffcc\024\uffcc" +
    "\001\002\000\010\011\uffdc\023\uffdc\024\uffdc\001\002\000" +
    "\006\011\ufff5\023\116\001\002\000\026\010\uffd2\011\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\001\002\000\010\011\uffee\023\uffee\024\uffee" +
    "\001\002\000\010\011\uffe9\023\uffe9\024\uffe9\001\002\000" +
    "\010\011\uffea\023\uffea\024\uffea\001\002\000\010\011\uffe8" +
    "\023\uffe8\024\uffe8\001\002\000\010\011\uffeb\023\uffeb\024" +
    "\uffeb\001\002\000\010\011\ufff1\023\ufff1\024\ufff1\001\002" +
    "\000\010\011\uffdd\023\uffdd\024\uffdd\001\002\000\010\011" +
    "\uffe3\023\uffe3\024\uffe3\001\002\000\112\004\066\006\073" +
    "\011\075\012\051\013\076\014\074\015\111\016\070\017" +
    "\072\020\114\021\047\023\056\026\113\027\054\030\063" +
    "\031\106\032\067\033\050\034\112\035\110\036\107\037" +
    "\062\040\115\041\064\042\057\043\045\044\103\045\055" +
    "\046\100\047\053\050\052\051\071\052\077\053\105\054" +
    "\046\055\061\001\002\000\006\011\ufff3\023\ufff3\001\002" +
    "\000\012\007\ufff6\014\ufff6\022\ufff6\032\ufff6\001\002\000" +
    "\112\004\066\006\073\011\075\012\051\013\076\014\074" +
    "\015\111\016\070\017\072\020\114\021\047\023\056\026" +
    "\113\027\054\030\063\031\106\032\067\033\050\034\112" +
    "\035\110\036\107\037\062\040\115\041\064\042\057\043" +
    "\045\044\103\045\055\046\100\047\053\050\052\051\071" +
    "\052\077\053\105\054\046\055\061\001\002\000\004\011" +
    "\ufff4\001\002\000\004\032\132\001\002\000\006\022\015" +
    "\032\125\001\002\000\004\032\126\001\002\000\004\032" +
    "\127\001\002\000\004\032\130\001\002\000\004\007\027" +
    "\001\002\000\006\007\027\014\ufffb\001\002\000\004\032" +
    "\133\001\002\000\004\032\134\001\002\000\006\007\027" +
    "\022\015\001\002\000\006\007\027\022\015\001\002\000" +
    "\006\007\027\022\015\001\002\000\006\007\027\014\ufffa" +
    "\001\002\000\006\014\ufff9\022\015\001\002\000\004\043" +
    "\142\001\002\000\014\015\147\016\145\017\143\020\144" +
    "\021\151\001\002\000\026\010\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\025\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\001\002\000\026\010\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\025\uffae\053\uffae\054\uffae\055\uffae\001\002" +
    "\000\026\010\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\025\uffaf\053\uffaf\054\uffaf\055\uffaf\001\002\000\016" +
    "\011\201\015\147\016\145\017\143\020\144\021\151\001" +
    "\002\000\026\010\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\025\uffb1\053\uffb1\054\uffb1\055\uffb1\001\002\000" +
    "\026\010\155\015\147\016\145\017\143\020\144\021\151" +
    "\025\160\053\105\054\046\055\061\001\002\000\026\010" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\025\uffad" +
    "\053\uffad\054\uffad\055\uffad\001\002\000\026\010\uffb2\015" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\025\uffb2\053\uffb2" +
    "\054\uffb2\055\uffb2\001\002\000\026\010\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\025\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\001\002\000\030\010\155\011\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\025\166\053\105\054\046" +
    "\055\061\001\002\000\030\010\uffb4\011\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\025\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\001\002\000\030\010\165\011\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\025\160\053\105\054\046" +
    "\055\061\001\002\000\016\011\uffc7\015\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\001\002\000\030\010\uffb6\011\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\025\uffb6\053" +
    "\uffb6\054\uffb6\055\uffb6\001\002\000\022\010\155\011\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\025\160\001" +
    "\002\000\022\010\155\011\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\025\166\001\002\000\022\010\165\011" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\025\160" +
    "\001\002\000\020\011\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\025\166\001\002\000\030\010\uffb5\011\uffb5" +
    "\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\025\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\001\002\000\030\010\uffb7\011\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\025\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\001\002\000\020\010\165\011\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\001\002\000" +
    "\026\011\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\025\166\053\105\054\046\055\061\001\002\000\020\011" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\025\160" +
    "\001\002\000\020\011\uffc1\015\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\025\166\001\002\000\016\011\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\001\002\000\026\010" +
    "\165\011\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\053\105\054\046\055\061\001\002\000\020\010\155\011" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\001\002" +
    "\000\020\010\165\011\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\001\002\000\016\011\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\001\002\000\026\010\155\015" +
    "\147\016\145\017\143\020\144\021\151\025\160\053\105" +
    "\054\046\055\061\001\002\000\010\007\uffc9\022\uffc9\032" +
    "\uffc9\001\002\000\016\011\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\010\002\005\003\006\027\003\001\001\000" +
    "\006\003\202\027\003\001\001\000\014\004\015\006\016" +
    "\007\010\013\013\014\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\123\007\010\014" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\017\013\020\014\011\001\001\000\002\001\001\000" +
    "\004\014\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\030\025" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\031\001\001\000\002\001\001\000\004\026\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\057\010\100" +
    "\011\064\012\103\023\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\057\011\116\023\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\057\011" +
    "\121\023\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\130\025\027\001\001" +
    "\000\004\025\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\135\007\010\024\134\025\027\001\001" +
    "\000\010\006\137\007\010\025\031\001\001\000\010\007" +
    "\017\024\136\025\027\001\001\000\004\025\031\001\001" +
    "\000\004\007\017\001\001\000\002\001\001\000\010\015" +
    "\145\016\147\017\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\177\017\151\001" +
    "\001\000\002\001\001\000\014\017\152\020\156\021\153" +
    "\022\155\023\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\173\023\174\001\001" +
    "\000\002\001\001\000\006\021\167\023\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\161\022\162" +
    "\001\001\000\004\022\166\001\001\000\004\021\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\172\001\001\000\004\021" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\176\001\001\000\004\022\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\152\020\201\021\153" +
    "\022\155\023\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



            public static Nodo raiz;
            public static int contador = 1;
            public static String resultado = "";
            public static LinkedList<TError> TablaES = new LinkedList<TError>();
            public static Stack<ValorExpresiones> pilaValExps = new Stack<ValorExpresiones>();
            
            public static int contador_val_expresiones = 0;
                // Variables para identificadores de conjuntos
                // public static StringBuilder valorConjuntoSB =  new StringBuilder();
            //     public static LinkedList<Conjunto> listaConjuntos = new LinkedList<Conjunto>();
            // //    public static LinkedList<Conjunto> listaConjuntos;
            // //    public static LinkedList<String> listaValoresConjuntos = new LinkedList<String>();
            // //    public static Stack<String> identificadoresConjuntos = new Stack<String>();
            // //    public static Conjunto conjunto_temporal;
            //     public static int contador_conjuntos = 0;
            //     // ::::::::::::::::::::::::::::     EXPRESIONES       ::::::::::::::::::::::::::::
            //     public static LinkedList<Expresion> listaExpresiones = new LinkedList<Expresion>();
            // //    public static LinkedList<Expresion> listaExpresiones;
            //     public static int contador_expresiones = 0;
            //     // ::::::::::::::::::::::::::::     LEXEMAS       ::::::::::::::::::::::::::::
            //     public static LinkedList<Lexema> listaLexemas = new LinkedList<Lexema>();
            // //    public static LinkedList<Lexema> listaLexemas;    
            //     public static int contador_lexemas = 0;
            //-------------------------------------------   Operaciones  ---------------------------------------------
            public static boolean esOperadorUnario(char x){
                switch(x){
                    case '+':
                    case '?':
                    case '*':
                        return true;
                }
                return false;
            }

            public static boolean esOperador(char x){
                switch(x){
                    case '+':
                    case '?':
                    case '*':
                    case '|':
                    case '.':
                        return true;
                }
                return false;
            }
            //-------------------------------------------   Graficar arbol  ---------------------------------------------
            public static void graficarArbol(Nodo act, String nombre){
                FileWriter fichero = null;
                PrintWriter pw = null;
                try {
                    fichero = new FileWriter("C:\\Users\\G\\Desktop\\" + nombre + ".dot");
                    pw = new PrintWriter(fichero);
                    pw.println("digraph G{");
                    pw.println("rankdir=UD");
                    pw.println("node[shape=box]");
                    pw.println("concentrate=true");
                    pw.println(act.getCodigoInterno());
                    pw.println("}");
                } catch (Exception e) {
                    System.out.println("error, no se realizo el archivo");
                } finally {
                    try {
                        if (null != fichero) {
                            fichero.close();
                        }
                    } catch (Exception e2) {
                        e2.printStackTrace();
                    }
                }
                //para compilar el archivo dot y obtener la imagen
                try {
                    //dirección doonde se ecnuentra el compilador de graphviz
                    String dotPath = "C:\\Program Files\\Graphviz\\bin\\dot.exe";
                    //dirección del archivo dot
                    String fileInputPath = "C:\\Users\\G\\Desktop\\" + nombre + ".dot";
                    //dirección donde se creara la magen
                    String fileOutputPath = "C:\\Users\\G\\Desktop\\" +nombre+ ".jpg";
                    //tipo de conversón
                    String tParam = "-Tjpg";
                    String tOParam = "-o";

                    String[] cmd = new String[5];
                    cmd[0] = dotPath;
                    cmd[1] = tParam;
                    cmd[2] = fileInputPath;
                    cmd[3] = tOParam;
                    cmd[4] = fileOutputPath;

                    Runtime rt = Runtime.getRuntime();

                    rt.exec(cmd);

                } catch (Exception ex) {
                    ex.printStackTrace();
                } finally {
                }
            }

        //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
        // Metodo para errores sintacticos
            public void syntax_error(Symbol s)
            {
                String lexema = s.value.toString();
                int fila = s.right;
                int columna = s.left;

                System.err.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
                System.err.println("\t\tLexema: " + lexema);
                System.err.println("\t\tFila: " + fila);
                System.err.println("\t\tColumna: " + columna);

                TError datos = new TError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado.");
                TablaES.add(datos);
            }
            // Metodo llamado, en caso no se puede recuperar del error.
            public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
            {
                String lexema = s.value.toString();
                int fila = s.right;
                int columna = s.left;

                System.err.println("!!!!!!! Error Sintactico, MODO PANICO !!!!!!!");
                System.err.println("\t\tLexema: " + lexema);
                System.err.println("\t\tFila: " + fila);
                System.err.println("\t\tColumna: " + columna);

                TError datos = new TError(lexema, fila, columna, "Error Sintactico", "F. Caracter no esperado.");
                TablaES.add(datos);
            }
            //-------------------------------------------------------------------------------------------------------------------------------------------
        

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


            
        
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO 
            {
              Object RESULT =null;
		int inicio_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inicio_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inicio_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        // Pantalla_principal.list_of_names += inicio_;
                                        // Nodo nuevo_nodo = new Nodo(null, null, "INICIO",);
                                        // nuevo_nodo.Hijos.add((Nodo) inicio_);
                                        // parser.raiz = (Nodo) inicio_;
                                        // resultado = (String) inicio_;
                                        // graficarArbol((Nodo) inicio_, "testArbol");
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= llaveA ESTRUCTURA_CUERPO llaveC 
            {
              Object RESULT =null;
		int estructura_cuerpo_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int estructura_cuerpo_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object estructura_cuerpo_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                        // ==============================================
                                            // Nodo nuevo_nodo = new Nodo("CUERPO");
                                            // nuevo_nodo.Hijos.add((Nodo) cuerpo_);
                                            // RESULT = nuevo_nodo;
                                        // ==============================================
                                        RESULT = estructura_cuerpo_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= ERROR CUERPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESTRUCTURA_CUERPO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESTRUCTURA_CUERPO ::= CONJUNTO EXPRESION porcentaje porcentaje porcentaje porcentaje LEXEMA 
            {
              Object RESULT =null;
		int conjunto_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int conjunto_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object conjunto_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expresion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expresion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object expresion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                                        // ==============================================
                                            // Nodo nuevo_nodo = new Nodo("ESTRUCTURA_CUERPO");
                                            // nuevo_nodo.Hijos.add((Nodo) es_cuerpo);
                                            // RESULT = nuevo_nodo;
                                            // RESULT = (Nodo) conjunto_;
                                        // ==============================================
                                        RESULT = expresion_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ESTRUCTURA_CUERPO ::= EXPRESION CONJUNTO porcentaje porcentaje porcentaje porcentaje LEXEMA 
            {
              Object RESULT =null;
		int expresion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expresion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object expresion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int conjunto_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int conjunto_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object conjunto_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                                        // ==============================================
                                            // Nodo nuevo_nodo = new Nodo("ESTRUCTURA_CUERPO");
                                            // nuevo_nodo.Hijos.add((Nodo) es_cuerpo);
                                            // RESULT = nuevo_nodo;
                                        // ==============================================
                                        RESULT = expresion_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESTRUCTURA_CUERPO ::= EXPRESION porcentaje porcentaje porcentaje porcentaje CONJUNTO LEXEMA 
            {
              Object RESULT =null;
		int expresion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expresion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object expresion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int conjunto_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int conjunto_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object conjunto_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                        // ==============================================
                                            // Nodo nuevo_nodo = new Nodo("ESTRUCTURA_CUERPO");
                                            // nuevo_nodo.Hijos.add((Nodo) es_cuerpo);
                                            // RESULT = nuevo_nodo;
                                        // ==============================================
                                        RESULT = expresion_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURA_CUERPO ::= EXPRESION porcentaje porcentaje porcentaje porcentaje LEXEMA CONJUNTO 
            {
              Object RESULT =null;
		int expresion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expresion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object expresion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int conjunto_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conjunto_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object conjunto_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        // ==============================================
                                            // Nodo nuevo_nodo = new Nodo("ESTRUCTURA_CUERPO");
                                            // nuevo_nodo.Hijos.add((Nodo) es_cuerpo);
                                            // RESULT = nuevo_nodo;
                                        // ==============================================
                                        RESULT = expresion_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONJUNTO ::= CONJUNTO ESTRUCTURA_CONJUNTO 
            {
              Object RESULT =null;
		int es_conj_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int es_conj_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object es_conj_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        // ==============================================
                                            // Nodo nuevo_nodo = new Nodo("CONJUNTO");
                                            // nuevo_nodo.Hijos.add((Nodo) conjunto_);
                                            // nuevo_nodo.Hijos.add((Nodo) es_conj);
                                            // RESULT = nuevo_nodo;
                                        // ==============================================
                                        RESULT = es_conj_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONJUNTO ::= ESTRUCTURA_CONJUNTO 
            {
              Object RESULT =null;
		int es_conj_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int es_conj_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object es_conj_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        // ==============================================
                                            // Nodo nuevo_nodo = new Nodo(null, null, "CONJUNTO", parser.contador);
                                            // parser.contador++;
                                            // nuevo_nodo.Hijos.add((Nodo) es_conj);
                                            // RESULT = nuevo_nodo;
                                        // ==============================================
                                        RESULT = es_conj_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURA_CONJUNTO ::= PR_conjunto dosPuntos identificador guion mayorQue LISTA_CONJUNTOS puntoComa 
            {
              Object RESULT =null;
		int identificador_conjuntoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int identificador_conjuntoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String identificador_conjunto = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lista_conjuntos_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lista_conjuntos_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista_conjuntos_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                        // ==============================================
                                            // Nodo nuevo_identificador_conjunto = new Nodo(null, null, String.valueOf(identificador_arbol), parser.contador);
                                            // parser.contador++;
                                            // RESULT = nuevo_identificador_conjunto;
                                        
                                        // ********************     Obteniendo conjuntos    ********************
                                        StringBuilder temp_conj = new StringBuilder();
                                        Resultado res = (Resultado) lista_conjuntos_;
                                        temp_conj.append(res.getContenido());
                                        System.out.println("\nConjunto reconocido: " + temp_conj.toString() + "\n");
                                        Instancias.listaConjuntos.add(new Conjunto(Instancias.contador_conjuntos, identificador_conjunto, temp_conj.toString()));
                                        Instancias.contador_conjuntos++;
                                        // RESULT = res.getNodoTemporal();
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONJUNTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_CONJUNTOS ::= CONJUNTO_COMA 
            {
              Object RESULT =null;
		int conjunto_coma_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conjunto_coma_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object conjunto_coma_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        String content = (String) conjunto_coma_;
                                        Resultado res = new Resultado(null, content);
                                        RESULT = res;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_CONJUNTOS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_CONJUNTOS ::= TIPO_CARACTER tilde TIPO_CARACTER 
            {
              Object RESULT =null;
		int tipo_caracter_izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipo_caracter_izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tipo_caracter_izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tilde_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tilde_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tilde_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tipo_caracter_derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipo_caracter_derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo_caracter_der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        String content = tipo_caracter_izq + tilde_ + tipo_caracter_der;
                                        Resultado res = new Resultado(null, content);
                                        RESULT = res;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_CONJUNTOS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONJUNTO_COMA ::= CONJUNTO_COMA coma TIPO_CARACTER 
            {
              Object RESULT =null;
		int tipo_caracter_izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipo_caracter_izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tipo_caracter_izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int coma_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int coma_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String coma_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tipo_caracter_derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipo_caracter_derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo_caracter_der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = tipo_caracter_izq + coma_ + tipo_caracter_der;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_COMA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONJUNTO_COMA ::= TIPO_CARACTER 
            {
              Object RESULT =null;
		int tipo_caracter_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipo_caracter_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo_caracter_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = tipo_caracter_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_COMA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CARACTERES ::= admiracion 
            {
              Object RESULT =null;
		int admiracion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int admiracion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String admiracion_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = admiracion_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CARACTERES ::= comillasDobles 
            {
              Object RESULT =null;
		int comillasDobles_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comillasDobles_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String comillasDobles_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = comillasDobles_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CARACTERES ::= numeral 
            {
              Object RESULT =null;
		int numeral_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numeral_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String numeral_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = numeral_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CARACTERES ::= dolar 
            {
              Object RESULT =null;
		int dolar_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dolar_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dolar_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = dolar_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CARACTERES ::= porcentaje 
            {
              Object RESULT =null;
		int porcentaje_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int porcentaje_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String porcentaje_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = porcentaje_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CARACTERES ::= ampersand 
            {
              Object RESULT =null;
		int ampersand_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ampersand_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ampersand_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = ampersand_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CARACTERES ::= comillaSimple 
            {
              Object RESULT =null;
		int comillaSimple_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comillaSimple_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String comillaSimple_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = comillaSimple_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CARACTERES ::= parentesisA 
            {
              Object RESULT =null;
		int parentesisA_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parentesisA_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String parentesisA_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = parentesisA_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CARACTERES ::= parentesisC 
            {
              Object RESULT =null;
		int parentesisC_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parentesisC_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String parentesisC_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = parentesisC_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CARACTERES ::= asterisco 
            {
              Object RESULT =null;
		int asterisco_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asterisco_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String asterisco_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = asterisco_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CARACTERES ::= mas 
            {
              Object RESULT =null;
		int mas_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mas_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mas_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = mas_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CARACTERES ::= coma 
            {
              Object RESULT =null;
		int coma_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int coma_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String coma_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = coma_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CARACTERES ::= guion 
            {
              Object RESULT =null;
		int guion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int guion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String guion_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = guion_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CARACTERES ::= punto 
            {
              Object RESULT =null;
		int punto_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int punto_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String punto_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = punto_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CARACTERES ::= diagonal 
            {
              Object RESULT =null;
		int diagonal_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int diagonal_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String diagonal_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = diagonal_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CARACTERES ::= dosPuntos 
            {
              Object RESULT =null;
		int dosPuntos_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dosPuntos_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dosPuntos_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = dosPuntos_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CARACTERES ::= puntoComa 
            {
              Object RESULT =null;
		int puntoComa_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int puntoComa_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String puntoComa_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = puntoComa_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CARACTERES ::= menorQue 
            {
              Object RESULT =null;
		int menorQue_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int menorQue_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String menorQue_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = menorQue_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CARACTERES ::= igual 
            {
              Object RESULT =null;
		int igual_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int igual_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String igual_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = igual_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CARACTERES ::= mayorQue 
            {
              Object RESULT =null;
		int mayorQue_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mayorQue_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mayorQue_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = mayorQue_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CARACTERES ::= interrogacion 
            {
              Object RESULT =null;
		int interrogacion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int interrogacion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String interrogacion_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = interrogacion_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CARACTERES ::= arroba 
            {
              Object RESULT =null;
		int arroba_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arroba_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String arroba_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = arroba_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CARACTERES ::= corcheteA 
            {
              Object RESULT =null;
		int corcheteA_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int corcheteA_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String corcheteA_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = corcheteA_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CARACTERES ::= diagonalInversa 
            {
              Object RESULT =null;
		int diagonalInversa_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int diagonalInversa_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String diagonalInversa_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = diagonalInversa_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CARACTERES ::= corcheteC 
            {
              Object RESULT =null;
		int corcheteC_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int corcheteC_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String corcheteC_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = corcheteC_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CARACTERES ::= acentoCircunflejo 
            {
              Object RESULT =null;
		int acentoCircunflejo_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acentoCircunflejo_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String acentoCircunflejo_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = acentoCircunflejo_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CARACTERES ::= guionBajo 
            {
              Object RESULT =null;
		int guionBajo_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int guionBajo_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String guionBajo_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = guionBajo_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CARACTERES ::= acentoGrave 
            {
              Object RESULT =null;
		int acentoGrave_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acentoGrave_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String acentoGrave_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = acentoGrave_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CARACTERES ::= llaveA 
            {
              Object RESULT =null;
		int llaveA_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llaveA_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String llaveA_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = llaveA_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CARACTERES ::= orBooleana 
            {
              Object RESULT =null;
		int orBooleana_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orBooleana_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String orBooleana_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = orBooleana_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CARACTERES ::= llaveC 
            {
              Object RESULT =null;
		int llaveC_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llaveC_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String llaveC_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = llaveC_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CARACTERES_ESPECIALES ::= comillasDoblesEspecial 
            {
              Object RESULT =null;
		int comillasDoblesEspecial_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comillasDoblesEspecial_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object comillasDoblesEspecial_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = comillasDoblesEspecial_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES_ESPECIALES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CARACTERES_ESPECIALES ::= comillaSimpleEspecial 
            {
              Object RESULT =null;
		int comillaSimpleEspecial_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comillaSimpleEspecial_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object comillaSimpleEspecial_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = comillaSimpleEspecial_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES_ESPECIALES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CARACTERES_ESPECIALES ::= saltoLineaEspecial 
            {
              Object RESULT =null;
		int saltoLineaEspecial_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int saltoLineaEspecial_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object saltoLineaEspecial_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = saltoLineaEspecial_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES_ESPECIALES",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_CARACTER ::= letras 
            {
              Object RESULT =null;
		int letras_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int letras_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String letras_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = letras_;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_CARACTER",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO_CARACTER ::= numero 
            {
              Object RESULT =null;
		int numero_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numero_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String numero_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = numero_;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_CARACTER",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO_CARACTER ::= CARACTERES 
            {
              Object RESULT =null;
		int caracteres_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caracteres_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object caracteres_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = caracteres_;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_CARACTER",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO_CARACTER ::= CARACTERES_ESPECIALES 
            {
              Object RESULT =null;
		int caracteresEspeciales_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caracteresEspeciales_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object caracteresEspeciales_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = caracteresEspeciales_;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_CARACTER",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION ESTRUCTURA_EXPRESION 
            {
              Object RESULT =null;
		int exp_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int es_expresion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int es_expresion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object es_expresion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        // ==============================================
                                            // Nodo nuevasExpresiones = new Nodo((Nodo) exp_, (Nodo) es_expresion_, "LIST_EXP", parser.contador);
                                            // parser.contador++;
                                            // RESULT = nuevasExpresiones;
                                        // ==============================================

                                        RESULT = (String) exp_ + (String) es_expresion_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= ESTRUCTURA_EXPRESION 
            {
              Object RESULT =null;
		int es_expresion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int es_expresion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object es_expresion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        // RESULT = (Nodo) es_expresion_;
                                        // ==============================================

                                        RESULT = (String) es_expresion_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ESTRUCTURA_EXPRESION ::= identificador guion mayorQue LISTA_EXPRESIONES puntoComa 
            {
              Object RESULT =null;
		int identificador_expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int identificador_expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String identificador_expresion = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lista_expresiones_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lista_expresiones_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista_expresiones_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                        // ********************     Obteniendo expresiones    ********************
                                        // ==============================================
                                            // Resultado res = (Resultado) lista_expresiones_;
                                            // Nodo nuevaListaExpresiones = res.getNodoTemporal();
                                            // String content = res.getContenido();
                                            // System.out.println("[GRAM] (sube) LIST_EXP: " + content);
                                        
                                        // ==============================================
                                        // Ingresando valores en pila1
                                            int contArbol = 0;
                                            Stack<String> pilaTemp = new Stack<String>();
                                            Instancias.listaExpresionesPila.add(parser.pilaValExps);
                                            for (ValorExpresiones valExpTemp : parser.pilaValExps) {
                                                pilaTemp.push(valExpTemp.getValor());
                                                valExpTemp.mostrar();
                                                Instancias.arbol_binario_expresiones.insertar(valExpTemp);
                                                // contArbol++;
                                            }
                                        // *************** Insertando en abb ***************
                                            // Copiando en stack temporal
                                            Stack<ValorExpresiones> pilaValExpsCOPIA = new Stack<ValorExpresiones>();
                                            // pilaValExpsCOPIA.addAll(pilaValExps);
                                            
                                            // pilaTemp.addAll(pilaValExps.getValor());
                                            System.out.println("\nPila temporal, antes: ");
                                            for(String val : pilaTemp){
                                                System.out.print(val);
                                            }
                                            System.out.println("\n");

                                            int tam_pila = parser.pilaValExps.size();
                                            for (int i = tam_pila - 1; i >= 0; i--) {
                                                String tipo = parser.pilaValExps.get(i).getTipo();
                                                
                                                if(tipo == "OP"){

                                                    char tipo_c = parser.pilaValExps.get(i).getValor().charAt(0);
                                                    if(esOperadorUnario(tipo_c)){
                                                        System.out.println("Tipo OP unaria: " + tipo_c);
                                                        // String op_unario = valExpTemp.getValor();
                                                        ValorExpresiones op_unario = parser.pilaValExps.get(i);
                                                        System.out.println("Insertando OP UN: " + op_unario.getValor());
                                                        pilaValExpsCOPIA.push(op_unario);
                                                        ValorExpresiones val1 = pilaValExpsCOPIA.get(1);
                                                        if(val1.getTipo() != "OP"){
                                                            pilaValExpsCOPIA.pop();
                                                            ValorExpresiones val1_ = pilaValExpsCOPIA.pop();
                                                            System.out.println("Insertando VAL UN: " + val1_.getValor());
                                                            pilaValExpsCOPIA.push(op_unario);
                                                            pilaValExpsCOPIA.push(val1_);
                                                            // pilaValExpsCOPIA.push(val1_);
                                                        }
                                                                                                              
                                                        
                                                    } else {
                                                        System.out.println("Tipo OP dual: " + tipo_c);
                                                        ValorExpresiones op = parser.pilaValExps.get(i);
                                                        

                                                        ValorExpresiones val = pilaValExpsCOPIA.get(0);
                                                        System.out.println("val: " + val.getTipo());
                                                        if(val.getTipo() != "OP"){
                                                            ValorExpresiones val_ = pilaValExpsCOPIA.pop();
                                                            System.out.println("Insertando VAL DU: " + val_.getValor());
                                                            pilaValExpsCOPIA.push(val_);
                                                            System.out.println("Insertando OP DU: " + op.getValor());
                                                            pilaValExpsCOPIA.push(op);
                                                            ValorExpresiones val1 = pilaValExpsCOPIA.get(1);
                                                            System.out.println("val1: " + val1.getTipo());
                                                            if(val1.getTipo() != "OP"){
                                                                pilaValExpsCOPIA.pop();
                                                                ValorExpresiones val1_ = pilaValExpsCOPIA.pop();
                                                                System.out.println("Insertando VAL 1 DU: " + val1_.getValor());
                                                                pilaValExpsCOPIA.push(op);
                                                                pilaValExpsCOPIA.push(val1_);
                                                            }
                                                        }
                                                        

                                                        // pilaValExpsCOPIA.push(val);
                                                        // pilaValExpsCOPIA.push(op);
                                                        // pilaValExpsCOPIA.push(val1);
                                                        
                                                    }
                                                } else {
                                                    
                                                    ValorExpresiones val = parser.pilaValExps.get(i);
                                                    System.out.println("VAL OUT: " + val.getValor());
                                                    pilaValExpsCOPIA.push(val);
                                                }
                                                
                                                // Instancias.arbol_binario_expresiones.
                                            }

                                            // System.out.println("\nPila temporal: ");
                                            // for(String val : pilaTemp){
                                            //     System.out.print(val);
                                            // }
                                            System.out.println("\nPila despues xdd: ");
                                            for (ValorExpresiones valExpTemp : pilaValExpsCOPIA) {
                                                System.out.print(valExpTemp.getValor());
                                            }
                                            System.out.println("\n");

                                            parser.pilaValExps.clear();
                                            parser.contador_val_expresiones = 0;
                                        // ==============================================

                                        String content = (String) lista_expresiones_;
                                        StringBuilder temp_exp = new StringBuilder();
                                        temp_exp.append((String) content);
                                        System.out.println("\nExpresion reconocida: " + temp_exp.toString() + "\n");
                                        Instancias.listaExpresiones.add(new Expresion(Instancias.contador_expresiones, identificador_expresion, temp_exp.toString()));
                                        Instancias.contador_expresiones++;
                                        // RESULT = nuevaListaExpresiones;
                                        RESULT = lista_expresiones_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES TIPO_OPERACION VALOR_EXPRESION 
            {
              Object RESULT =null;
		int lista_exp_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lista_exp_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista_exp_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipo_operacion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipo_operacion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo_operacion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor_expresion_derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_expresion_derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor_expresion_der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        // ==============================================
                                            // Recuperando valores
                                            // Resultado res_lista_exp_ = (Resultado) lista_exp_;
                                            // Resultado res_tipo_op = (Resultado) tipo_operacion_;
                                            // Resultado res_valor_exp_der = (Resultado) valor_expresion_der;
                                            // String content_tipo_op = res_tipo_op.getContenido();
                                            // String content_valor_lista_exp_ = res_lista_exp_.getContenido();
                                            // String content_valor_exp_der = res_valor_exp_der.getContenido();
                                            // String content = content_valor_lista_exp_ + content_tipo_op + content_valor_exp_der;
                                            // // Decidiendo
                                            // Nodo nuevoExpresion = new Nodo(res_lista_exp_.getNodoTemporal(), res_tipo_op.getNodoTemporal(), "LIST_TOP", parser.contador);
                                            // parser.contador++;
                                            // Nodo nuevaOperacion = new Nodo(nuevoExpresion, res_valor_exp_der.getNodoTemporal(), "LIST_TOP_VALEXP", parser.contador);
                                            // parser.contador++;
                                            // // Resultado res_lista_exp_ = (Resultado) lista_exp_;
                                            // // System.out.println("contttt: \t\t" + res_lista_exp_.getContenido());
                                            // // String content = res_lista_exp_.getContenido() + (String) tipo_operacion_ + (String) valor_expresion_der;
                                            // // String content = (String) lista_exp_ + (String) tipo_operacion_ + (String) valor_expresion_der;
                                            // Resultado res = new Resultado(nuevaOperacion, content);
                                            // // String content = res.getContenido();
                                            // System.out.println("[GRAM] (padre) LIST_TOP_VALEXP: " + content);
                                            // RESULT = res;
                                        // ==============================================

                                        String content = (String) lista_exp_ + (String) tipo_operacion_ + (String) valor_expresion_der;
                                        RESULT = content;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTA_EXPRESIONES ::= TIPO_OPERACION VALOR_EXPRESION 
            {
              Object RESULT =null;
		int tipo_operacion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipo_operacion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo_operacion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor_expresion_derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_expresion_derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor_expresion_der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        // ==============================================
                                            // Resultado res_tipo_op = (Resultado) tipo_operacion_;
                                            // Resultado res_valor_exp_der = (Resultado) valor_expresion_der;
                                            // String content_tipo_op = res_tipo_op.getContenido();
                                            // String content_valor_exp_der = res_valor_exp_der.getContenido();
                                            // String content = content_tipo_op + content_valor_exp_der;
                                            // // Decidiendo
                                            // Nodo nuevoExpresion = new Nodo(res_tipo_op.getNodoTemporal(), res_valor_exp_der.getNodoTemporal(), "TOP_VALEXP", parser.contador);
                                            // parser.contador++; 
                                            // Resultado res = new Resultado(nuevoExpresion, content);
                                            // System.out.println("[GRAM] (padre) TOP_VALEXP: " + content);
                                            // RESULT = res;
                                        // ==============================================

                                        String content = (String) tipo_operacion_ + (String) valor_expresion_der;
                                        RESULT = content;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALOR_EXPRESION ::= VALOR_ID VALOR_CHAR CARACTERES_ESPECIALES 
            {
              Object RESULT =null;
		int valor_id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valor_id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object valor_id_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valor_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valor_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int esp_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esp_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object esp_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Resultado res_valor_id = (Resultado) valor_id_;
                                                // Resultado res_valor_char = (Resultado) valor_char_;
                                                // Resultado res_esp_char = (Resultado) esp_char_;
                                                // String content_valor_id = res_valor_id.getContenido();
                                                // String content_valor_char = res_valor_char.getContenido();
                                                // String content_esp_char = res_esp_char.getContenido();
                                                // String content = content_valor_id + content_valor_char + co ntent_esp_char;
                                                // System.out.println("[GRAM] (padre) VALEXP_ID_CHAR_ESP: " + content);
                                                // Nodo nuevoValorExpresionT = new Nodo(res_valor_id.getNodoTemporal(), res_valor_char.getNodoTemporal(), "ID_CHAR", parser.contador);
                                                // parser.contador++;
                                                // Nodo nuevoValorExpresion = new Nodo(nuevoValorExpresionT, res_esp_char.getNodoTemporal(), "ID_CHAR_ESP", parser.contador);
                                                // parser.contador++;
                                                // Resultado res = new Resultado(nuevoValorExpresion, content);

                                                // RESULT = res;
                                            // ==============================================
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_id_, "ID"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_char_, "CHAR"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) esp_char_, "ESP"));
                                            // parser.contador_val_expresiones++;

                                            RESULT = (String) valor_id_ + (String) valor_char_ + (String) esp_char_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALOR_EXPRESION ::= VALOR_CHAR VALOR_ID CARACTERES_ESPECIALES 
            {
              Object RESULT =null;
		int valor_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valor_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object valor_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valor_id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valor_id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor_id_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int esp_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esp_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object esp_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Resultado res_valor_id = (Resultado) valor_id_;
                                                // Resultado res_valor_char = (Resultado) valor_char_;
                                                // Resultado res_esp_char = (Resultado) esp_char_;
                                                // String content_valor_id = res_valor_id.getContenido();
                                                // String content_valor_char = res_valor_char.getContenido();
                                                // String content_esp_char = res_esp_char.getContenido();
                                                // String content = content_valor_char + content_valor_id + content_esp_char;
                                                // System.out.println("[GRAM] (padre) VALEXP_CHAR_ID_ESP: " + content);
                                                // Nodo nuevoValorExpresionT = new Nodo(res_valor_char.getNodoTemporal(), res_valor_id.getNodoTemporal(), "ID_CHAR", parser.contador);
                                                // parser.contador++;
                                                // Nodo nuevoValorExpresion = new Nodo(nuevoValorExpresionT, res_esp_char.getNodoTemporal(), "ID_CHAR_ESP", parser.contador);
                                                // parser.contador++;
                                                // Resultado res = new Resultado(nuevoValorExpresion, content);

                                                // RESULT = res;
                                            // ==============================================
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_char_, "CHAR"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_id_, "ID"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) esp_char_, "ESP"));
                                            // parser.contador_val_expresiones++;

                                            RESULT = (String) valor_char_ + (String) valor_id_ + (String) esp_char_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALOR_EXPRESION ::= CARACTERES_ESPECIALES VALOR_ID VALOR_CHAR 
            {
              Object RESULT =null;
		int esp_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esp_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object esp_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valor_id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valor_id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor_id_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Resultado res_esp_char = (Resultado) esp_char_;
                                                // Resultado res_valor_id = (Resultado) valor_id_;
                                                // Resultado res_valor_char = (Resultado) valor_char_;
                                                // String content_valor_id = res_valor_id.getContenido();
                                                // String content_valor_char = res_valor_char.getContenido();
                                                // String content_esp_char = res_esp_char.getContenido();
                                                // String content = content_esp_char + content_valor_id + content_valor_char;
                                                // System.out.println("[GRAM] (padre) VALEXP_ESP_ID_CHAR: " + content);
                                                // Nodo nuevoValorExpresionT = new Nodo(res_esp_char.getNodoTemporal(), res_valor_id.getNodoTemporal(), "ESP_CHAR", parser.contador);
                                                // parser.contador++;
                                                // Nodo nuevoValorExpresion = new Nodo(nuevoValorExpresionT, res_valor_char.getNodoTemporal(), "ESP_CHAR_ID", parser.contador);
                                                // parser.contador++;
                                                // Resultado res = new Resultado(nuevoValorExpresion, content);

                                                // RESULT = res;
                                            // ==============================================
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) esp_char_, "ESP"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_id_, "ID"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_char_, "CHAR"));
                                            // parser.contador_val_expresiones++;

                                            RESULT = (String) esp_char_ + (String) valor_id_ + (String) valor_char_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALOR_EXPRESION ::= CARACTERES_ESPECIALES VALOR_CHAR VALOR_ID 
            {
              Object RESULT =null;
		int esp_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int esp_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object esp_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valor_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valor_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor_id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor_id_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Resultado res_esp_char = (Resultado) esp_char_;
                                                // Resultado res_valor_id = (Resultado) valor_id_;
                                                // Resultado res_valor_char = (Resultado) valor_char_;
                                                // String content_valor_id = res_valor_id.getContenido();
                                                // String content_valor_char = res_valor_char.getContenido();
                                                // String content_esp_char = res_esp_char.getContenido();
                                                // String content = content_esp_char + content_valor_char + content_valor_id;
                                                // System.out.println("[GRAM] (padre) VALEXP_ESP_CHAR_ID: " + content);
                                                // Nodo nuevoValorExpresionT = new Nodo(res_esp_char.getNodoTemporal(), res_valor_char.getNodoTemporal(), "ESP_CHAR", parser.contador);
                                                // parser.contador++;
                                                // Nodo nuevoValorExpresion = new Nodo(nuevoValorExpresionT, res_valor_id.getNodoTemporal(), "ESP_CHAR_ID", parser.contador);
                                                // parser.contador++;
                                                // Resultado res = new Resultado(nuevoValorExpresion, content);

                                                // RESULT = res;
                                            // ==============================================
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) esp_char_, "ESP"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_char_, "CHAR"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_id_, "ID"));
                                            // parser.contador_val_expresiones++;

                                            RESULT = (String) esp_char_ + (String) valor_char_ + (String) valor_id_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALOR_EXPRESION ::= VALOR_ID CARACTERES_ESPECIALES VALOR_CHAR 
            {
              Object RESULT =null;
		int valor_id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valor_id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object valor_id_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int esp_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esp_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object esp_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Resultado res_valor_id = (Resultado) valor_id_;
                                                // Resultado res_esp_char = (Resultado) esp_char_;
                                                // Resultado res_valor_char = (Resultado) valor_char_;
                                                // String content_valor_id = res_valor_id.getContenido();
                                                // String content_valor_char = res_valor_char.getContenido();
                                                // String content_esp_char = res_esp_char.getContenido();
                                                // String content = content_valor_id + esp_char_ + content_valor_char;
                                                // System.out.println("[GRAM] (padre) VALEXP_ID_ESP_CHAR: " + content);
                                                // Nodo nuevoValorExpresionT = new Nodo(res_valor_id.getNodoTemporal(), res_esp_char.getNodoTemporal(), "ID_CHAR", parser.contador);
                                                // parser.contador++;
                                                // Nodo nuevoValorExpresion = new Nodo(nuevoValorExpresionT, res_valor_char.getNodoTemporal(), "ID_CHAR_ESP", parser.contador);
                                                // parser.contador++;
                                                // Resultado res = new Resultado(nuevoValorExpresion, content);

                                                // RESULT = res;
                                            // ==============================================
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_id_, "ID"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) esp_char_, "ESP"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_char_, "CHAR"));
                                            // parser.contador_val_expresiones++;

                                            RESULT = (String) valor_id_ + (String) esp_char_ + (String) valor_char_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALOR_EXPRESION ::= VALOR_CHAR CARACTERES_ESPECIALES VALOR_ID 
            {
              Object RESULT =null;
		int valor_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valor_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object valor_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int esp_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esp_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object esp_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor_id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor_id_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Resultado res_valor_id = (Resultado) valor_id_;
                                                // Resultado res_esp_char = (Resultado) esp_char_;
                                                // Resultado res_valor_char = (Resultado) valor_char_;
                                                // String content_valor_id = res_valor_id.getContenido();
                                                // String content_valor_char = res_valor_char.getContenido();
                                                // String content_esp_char = res_esp_char.getContenido();
                                                // String content = content_valor_char + content_esp_char + content_valor_id;
                                                // System.out.println("[GRAM] (padre) VALEXP_CHAR_ESP_ID: " + content);
                                                // Nodo nuevoValorExpresionT = new Nodo(res_valor_char.getNodoTemporal(), res_esp_char.getNodoTemporal(), "ID_CHAR", parser.contador);
                                                // parser.contador++;
                                                // Nodo nuevoValorExpresion = new Nodo(nuevoValorExpresionT, res_valor_id.getNodoTemporal(), "ID_CHAR_ESP", parser.contador);
                                                // parser.contador++;
                                                // Resultado res = new Resultado(nuevoValorExpresion, content);

                                                // RESULT = res;
                                            // ==============================================
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_char_, "CHAR"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) esp_char_, "ESP"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_id_, "ID"));
                                            // parser.contador_val_expresiones++;

                                            RESULT = (String) valor_char_ + (String) esp_char_ + (String) valor_id_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALOR_EXPRESION ::= VALOR_ID CARACTERES_ESPECIALES 
            {
              Object RESULT =null;
		int valor_id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valor_id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor_id_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int esp_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esp_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object esp_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Resultado res_valor_id = (Resultado) valor_id_;
                                                // // Resultado res_valor_char = (Resultado) valor_char_;
                                                // Resultado res_esp_char = (Resultado) esp_char_;
                                                // String content_valor_id = res_valor_id.getContenido();
                                                // // String content_valor_char = res_valor_char.getContenido();
                                                // String content_esp_char = res_esp_char.getContenido();
                                                // String content = content_valor_id + content_esp_char;
                                                // System.out.println("[GRAM] (padre) VALEXP_ID_ESP: " + content);
                                                // Nodo nuevoValorExpresion = new Nodo(res_valor_id.getNodoTemporal(), res_esp_char.getNodoTemporal(), "ID_CHAR", parser.contador);
                                                // parser.contador++;
                                                // Resultado res = new Resultado(nuevoValorExpresion, content);

                                                // RESULT = res;
                                            // ==============================================
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_id_, "ID"));
                                            // parser.contador_val_expresiones++;                                            
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) esp_char_, "ESP"));
                                            // parser.contador_val_expresiones++;

                                            RESULT = (String) valor_id_ + (String) esp_char_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALOR_EXPRESION ::= CARACTERES_ESPECIALES VALOR_ID 
            {
              Object RESULT =null;
		int esp_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esp_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object esp_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor_id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor_id_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Resultado res_valor_id = (Resultado) valor_id_;
                                                // // Resultado res_valor_char = (Resultado) valor_char_;
                                                // Resultado res_esp_char = (Resultado) esp_char_;
                                                // String content_valor_id = res_valor_id.getContenido();
                                                // // String content_valor_char = res_valor_char.getContenido();
                                                // String content_esp_char = res_esp_char.getContenido();
                                                // String content = content_esp_char + content_valor_id;
                                                // System.out.println("[GRAM] (padre) VALEXP_ESP_ID: " + content);
                                                // Nodo nuevoValorExpresion = new Nodo(res_esp_char.getNodoTemporal(), res_valor_id.getNodoTemporal(), "ESP_CHAR", parser.contador);
                                                // parser.contador++;
                                                // Resultado res = new Resultado(nuevoValorExpresion, content);

                                                // RESULT = res;
                                            // ==============================================
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) esp_char_, "ESP"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_id_, "ID"));
                                            // parser.contador_val_expresiones++;

                                            RESULT = (String) esp_char_ + (String) valor_id_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALOR_EXPRESION ::= VALOR_CHAR CARACTERES_ESPECIALES 
            {
              Object RESULT =null;
		int valor_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valor_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int esp_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esp_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object esp_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Resultado res_valor_id = (Resultado) valor_id_;
                                                // Resultado res_valor_char = (Resultado) valor_char_;
                                                // Resultado res_esp_char = (Resultado) esp_char_;
                                                // // String content_valor_id = res_valor_id.getContenido();
                                                // String content_valor_char = res_valor_char.getContenido();
                                                // String content_esp_char = res_esp_char.getContenido();
                                                // String content = content_valor_char + content_esp_char;
                                                // System.out.println("[GRAM] (padre) VALEXP_ESP_CHAR: " + content);
                                                // Nodo nuevoValorExpresion = new Nodo(res_valor_char.getNodoTemporal(), res_esp_char.getNodoTemporal(), "CHAR_ESP", parser.contador);
                                                // parser.contador++;
                                                // Resultado res = new Resultado(nuevoValorExpresion, content);

                                                // RESULT = res;
                                            // ==============================================
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_char_, "CHAR"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) esp_char_, "ESP"));
                                            // parser.contador_val_expresiones++;

                                            RESULT = (String) valor_char_ + (String) esp_char_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALOR_EXPRESION ::= CARACTERES_ESPECIALES VALOR_CHAR 
            {
              Object RESULT =null;
		int esp_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esp_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object esp_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Resultado res_valor_id = (Resultado) valor_id_;
                                                // Resultado res_esp_char = (Resultado) esp_char_;
                                                // Resultado res_valor_char = (Resultado) valor_char_;
                                                
                                                // // String content_valor_id = res_valor_id.getContenido();
                                                // String content_valor_char = res_valor_char.getContenido();
                                                // String content_esp_char = res_esp_char.getContenido();
                                                // String content = content_esp_char + content_valor_char;
                                                // System.out.println("[GRAM] (padre) VALEXP_CHAR_ESP: " + content);
                                                // Nodo nuevoValorExpresion = new Nodo(res_esp_char.getNodoTemporal(), res_valor_char.getNodoTemporal(), "ESP_CHAR", parser.contador);
                                                // parser.contador++;
                                                // Resultado res = new Resultado(nuevoValorExpresion, content);

                                                // RESULT = res;
                                            // ==============================================
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) esp_char_, "ESP"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_char_, "CHAR"));
                                            // parser.contador_val_expresiones++;

                                            RESULT = (String) esp_char_ + (String) valor_char_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALOR_EXPRESION ::= VALOR_ID VALOR_CHAR 
            {
              Object RESULT =null;
		int valor_id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valor_id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor_id_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Resultado res_valor_id = (Resultado) valor_id_;
                                                // Resultado res_valor_char = (Resultado) valor_char_;
                                                // // Resultado res_esp_char = (Resultado) esp_char_;
                                                // String content_valor_id = res_valor_id.getContenido();
                                                // String content_valor_char = res_valor_char.getContenido();
                                                // // String content_esp_char = res_esp_char.getContenido();
                                                // String content = content_valor_id + content_valor_char;
                                                // System.out.println("[GRAM] (padre) VALEXP_ID_CHAR: " + content);
                                                // Nodo nuevoValorExpresion = new Nodo(res_valor_id.getNodoTemporal(), res_valor_char.getNodoTemporal(), "ID_CHAR", parser.contador);
                                                // parser.contador++;
                                                // Resultado res = new Resultado(nuevoValorExpresion, content);

                                                // RESULT = res;
                                            // ==============================================
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_id_, "ID"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_char_, "CHAR"));
                                            // parser.contador_val_expresiones++;

                                            RESULT = (String) valor_id_ + (String) valor_char_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALOR_EXPRESION ::= VALOR_CHAR VALOR_ID 
            {
              Object RESULT =null;
		int valor_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valor_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor_id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor_id_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Resultado res_valor_char = (Resultado) valor_char_;
                                                // Resultado res_valor_id = (Resultado) valor_id_;
                                                
                                                // // Resultado res_esp_char = (Resultado) esp_char_;
                                                // String content_valor_id = res_valor_id.getContenido();
                                                // String content_valor_char = res_valor_char.getContenido();
                                                // // String content_esp_char = res_esp_char.getContenido();
                                                // String content = content_valor_char + content_valor_id;
                                                // System.out.println("[GRAM] (padre) VALEXP_CHAR_ID: " + content);
                                                // Nodo nuevoValorExpresion = new Nodo(res_valor_char.getNodoTemporal(), res_valor_id.getNodoTemporal(), "CHAR_ID", parser.contador);
                                                // parser.contador++;
                                                // Resultado res = new Resultado(nuevoValorExpresion, content);

                                                // RESULT = res;
                                            // ==============================================
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_char_, "CHAR"));
                                            // parser.contador_val_expresiones++;
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_id_, "ID"));
                                            // parser.contador_val_expresiones++;

                                            RESULT = (String) valor_char_ + (String) valor_id_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALOR_EXPRESION ::= VALOR_ID 
            {
              Object RESULT =null;
		int valor_id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor_id_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Resultado res = (Resultado) valor_id_;
                                                // String content = res.getContenido();
                                                // System.out.println("[GRAM] (sube) VALEXP_ID: " + content);
                                                // RESULT = res;
                                                // RESULT = valor_id_ + identificador_;
                                            // ==============================================
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_id_, "ID"));
                                            // parser.contador_val_expresiones++;

                                            RESULT = (String) valor_id_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALOR_EXPRESION ::= VALOR_CHAR 
            {
              Object RESULT =null;
		int valor_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object valor_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Resultado res = (Resultado) val_char_;
                                                // String content = res.getContenido();
                                                // System.out.println("[GRAM] (sube) VALEXP_CHAR: " + content);
                                                // RESULT = res;
                                            // ==============================================
                                            // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_char_, "CHAR"));
                                            // parser.contador_val_expresiones++;

                                            RESULT = (String) valor_char_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALOR_EXPRESION ::= CARACTERES_ESPECIALES 
            {
              Object RESULT =null;
		int esp_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esp_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object esp_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            // ==============================================
                                                // Nodo nuevoCaracterEsp = new Nodo(null, null, (String) esp_char_, parser.contador);
                                                // parser.contador++;
                                                // System.out.println("[GRAM] (hoja) VALEXP_ESP: " + esp_char_);
                                                // Resultado res = new Resultado(nuevoCaracterEsp, (String) esp_char_);
                                                // RESULT = res;
                                            // ==============================================
                                            parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) esp_char_, "ESP"));
                                            parser.contador_val_expresiones++;

                                            RESULT = (String) esp_char_;
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALOR_ID ::= VALOR_ID valorIDConjunto 
            {
              Object RESULT =null;
		int valor_id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valor_id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor_id_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int identificador_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identificador_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identificador_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        // ==============================================
                                            // Nodo nuevoValorID = new Nodo(null, null, (String) valor_id_, parser.contador);
                                            // parser.contador++;
                                            // Nodo nuevoID = new Nodo(null, null, identificador_, parser.contador);
                                            // parser.contador++;
                                            // Nodo NuevoNodo = new Nodo(nuevoValorID, nuevoID, "IDS", parser.contador);
                                            // parser.contador++;
                                            // String content = (String) valor_id_ + identificador_;
                                            // System.out.println("[GRAM] (padre) VAL_ID: " + content);
                                            // Resultado res = new Resultado(NuevoNodo, content);
                                            // RESULT = res;
                                        // ==============================================
                                        // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_id_, "ID"));
                                        // parser.contador_val_expresiones++;
                                        parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, identificador_, "ID"));
                                        parser.contador_val_expresiones++;

                                        RESULT = (String) valor_id_ + (String) identificador_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_ID",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VALOR_ID ::= valorIDConjunto 
            {
              Object RESULT =null;
		int identificador_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identificador_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identificador_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        // ==============================================
                                            // Nodo NuevoNodo = new Nodo(null, null, identificador_, parser.contador);
                                            // parser.contador++;
                                            // System.out.println("[GRAM] (hoja) VAL_ID: " + identificador_);
                                            // Resultado res = new Resultado(NuevoNodo, identificador_);
                                            // RESULT = res;
                                        // ==============================================
                                        parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, identificador_, "ID"));
                                        parser.contador_val_expresiones++;

                                        RESULT = (String) identificador_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_ID",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALOR_CHAR ::= VALOR_CHAR cadena 
            {
              Object RESULT =null;
		int valor_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valor_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object valor_char_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cadena_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadena_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        // ==============================================
                                            // Nodo nuevoValorChar = new Nodo(null, null, (String) valor_char_, parser.contador);
                                            // parser.contador++;
                                            // Nodo nuevoCadena = new Nodo(null, null, cadena_, parser.contador);
                                            // parser.contador++;
                                            // Nodo NuevoNodo = new Nodo(nuevoValorChar, nuevoCadena, "CHARS", parser.contador);
                                            // parser.contador++;
                                            // String content = (String) valor_char_ + cadena_;
                                            // System.out.println("[GRAM] (padre) VAL_CHAR: " + content);
                                            // Resultado res = new Resultado(NuevoNodo, content);
                                            // RESULT = res;
                                        // ==============================================
                                        // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) valor_char_, "CHAR"));
                                        // parser.contador_val_expresiones++;
                                        parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, cadena_, "CHAR"));
                                        parser.contador_val_expresiones++;
                                        
                                        RESULT = (String) valor_char_ + cadena_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_CHAR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALOR_CHAR ::= cadena 
            {
              Object RESULT =null;
		int cadena_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadena_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    // ==============================================
                                        // Nodo NuevoNodo = new Nodo(null, null, cadena_, parser.contador);
                                        // parser.contador++;
                                        // System.out.println("[GRAM] (hoja) VAL_CHAR: " + cadena_);
                                        // Resultado res = new Resultado(NuevoNodo, cadena_);
                                        // RESULT = res;
                                    // ==============================================
                                        parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, cadena_, "CHAR"));
                                        parser.contador_val_expresiones++;

                                        RESULT = cadena_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_CHAR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TIPO_OPERACION ::= TIPO_OPERACION OPERADOR 
            {
              Object RESULT =null;
		int tipo_operacion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipo_operacion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo_operacion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int operador_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operador_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object operador_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    // ==============================================
                                        // Nodo nuevoTipoOp = new Nodo(null, null, (String) tipo_operacion_, parser.contador);
                                        // parser.contador++;
                                        // Nodo nuevoOperador = new Nodo(null, null, (String) operador_, parser.contador);
                                        // parser.contador++;
                                        // Nodo NuevoNodo = new Nodo( nuevoTipoOp, nuevoOperador, "OPS", parser.contador);
                                        // parser.contador++;
                                        // String content =  (String) tipo_operacion_ + (String) operador_;
                                        // System.out.println("[GRAM] (padre) TIPO_OP: " + content);
                                        // Resultado res = new Resultado(NuevoNodo, content);
                                        // RESULT = res;
                                    // ==============================================
                                        // parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) tipo_operacion_, "OP"));
                                        // parser.contador_val_expresiones++;
                                        parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) operador_, "OP"));
                                        parser.contador_val_expresiones++;

                                        RESULT = (String) tipo_operacion_ + (String) operador_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPO_OPERACION ::= OPERADOR 
            {
              Object RESULT =null;
		int operador_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operador_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object operador_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    // ==============================================
                                        // Nodo NuevoNodo = new Nodo(null, null, (String) operador_, parser.contador);
                                        // parser.contador++;
                                        // System.out.println("[GRAM] (hoja) TIPO_OP: " + (String) operador_);
                                        // Resultado res = new Resultado(NuevoNodo, (String) operador_);
                                        // RESULT = res;
                                    // ==============================================
                                        parser.pilaValExps.add(new ValorExpresiones(parser.contador_val_expresiones, (String) operador_, "OP"));
                                        parser.contador_val_expresiones++;

                                        RESULT = (String) operador_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERADOR ::= asterisco 
            {
              Object RESULT =null;
		int asterico_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asterico_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String asterico_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    // ==============================================
                                        // Nodo nuevoAsterisco = new Nodo(null, null, asterico_, parser.contador);
                                        // parser.contador++;
                                        // Resultado res = new Resultado(nuevoAsterisco, asterico_);
                                        // RESULT = res;
                                    // ==============================================

                                        RESULT = asterico_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERADOR ::= punto 
            {
              Object RESULT =null;
		int punto_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int punto_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String punto_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    // ==============================================
                                        // Nodo nuevoPunto = new Nodo(null, null, punto_, parser.contador);
                                        // parser.contador++;
                                        // Resultado res = new Resultado(nuevoPunto, punto_);
                                        // RESULT = res;
                                    // ==============================================

                                        RESULT = punto_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERADOR ::= mas 
            {
              Object RESULT =null;
		int mas_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mas_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mas_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    // ==============================================
                                        // Nodo nuevoMas = new Nodo(null, null, mas_, parser.contador);
                                        // parser.contador++;
                                        // Resultado res = new Resultado(nuevoMas, mas_);
                                        // RESULT = res;
                                    // ==============================================

                                        RESULT = mas_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADOR ::= interrogacion 
            {
              Object RESULT =null;
		int interrogacion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int interrogacion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String interrogacion_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    // ==============================================
                                        // Nodo nuevoInterrogacion = new Nodo(null, null, interrogacion_, parser.contador);
                                        // parser.contador++;
                                        // Resultado res = new Resultado(nuevoInterrogacion, interrogacion_);
                                        // RESULT = res;
                                    // ==============================================

                                        RESULT = interrogacion_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADOR ::= orBooleana 
            {
              Object RESULT =null;
		int orBooleana_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orBooleana_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String orBooleana_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    // ==============================================
                                        // Nodo nuevoOrBooleana = new Nodo(null, null, orBooleana_, parser.contador);
                                        // parser.contador++;
                                        // Resultado res = new Resultado(nuevoOrBooleana, orBooleana_);
                                        // RESULT = res;
                                    
                                    // ==============================================

                                        RESULT = orBooleana_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LEXEMA ::= LEXEMA ESTRUCTURA_LEXEMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LEXEMA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LEXEMA ::= ESTRUCTURA_LEXEMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LEXEMA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ESTRUCTURA_LEXEMA ::= identificador dosPuntos LISTA_LEXEMAS puntoComa 
            {
              Object RESULT =null;
		int identificador_lexemaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identificador_lexemaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String identificador_lexema = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lista_lexemas_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lista_lexemas_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista_lexemas_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                        // ********************     Obteniendo lexemas    ********************
                                        StringBuilder temp_lex = new StringBuilder();
                                        temp_lex.append(lista_lexemas_);
                                        System.out.println("\nLexema reconocido: " + temp_lex.toString() + "\n");
                                        Instancias.listaLexemas.add(new Lexema(Instancias.contador_lexemas, identificador_lexema, temp_lex.toString()));
                                        Instancias.contador_lexemas++;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_LEXEMA",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTA_LEXEMAS ::= LISTA_LEXEMAS cadena 
            {
              Object RESULT =null;
		int cadena_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadena_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = cadena_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_LEXEMAS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTA_LEXEMAS ::= cadena 
            {
              Object RESULT =null;
		int cadena_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadena_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = cadena_;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_LEXEMAS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
