
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.proyecto1.analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import com.proyecto1.interfaz.*;
import com.proyecto1.estructuras.arbol.*;
import com.proyecto1.estructuras.pojos.*;
import com.proyecto1.estructuras.pojos.Conjunto;
import com.proyecto1.estructuras.Instancias;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\003\000\002\004\002\000\002\004\011" +
    "\000\002\004\011\000\002\004\011\000\002\004\011\000" +
    "\002\006\004\000\002\006\003\000\002\007\011\000\002" +
    "\010\003\000\002\010\005\000\002\012\005\000\002\012" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\013\004\000\002\013\003\000\002\014\007\000\002\015" +
    "\005\000\002\015\004\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\021\004\000\002\021\003\000" +
    "\002\022\004\000\002\022\003\000\002\016\004\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\023\004" +
    "\000\002\023\003\000\002\024\006\000\002\025\004\000" +
    "\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\013\005\001\002\000\004\002\ufffe\001" +
    "\002\000\010\007\013\014\ufffd\022\015\001\002\000\004" +
    "\002\010\001\002\000\004\002\000\001\002\000\004\002" +
    "\001\001\002\000\012\007\ufff7\014\ufff7\022\ufff7\032\ufff7" +
    "\001\002\000\010\007\uffcd\022\uffcd\032\uffcd\001\002\000" +
    "\004\037\136\001\002\000\010\007\013\022\015\032\120" +
    "\001\002\000\004\012\041\001\002\000\004\014\040\001" +
    "\002\000\006\007\013\022\015\001\002\000\012\007\ufff8" +
    "\014\ufff8\022\ufff8\032\ufff8\001\002\000\006\007\013\032" +
    "\022\001\002\000\004\032\024\001\002\000\010\007\uffce" +
    "\022\uffce\032\uffce\001\002\000\004\032\025\001\002\000" +
    "\004\032\026\001\002\000\004\007\027\001\002\000\004" +
    "\012\033\001\002\000\010\007\uffba\014\uffba\022\uffba\001" +
    "\002\000\006\007\027\014\ufffc\001\002\000\010\007\uffbb" +
    "\014\uffbb\022\uffbb\001\002\000\004\010\034\001\002\000" +
    "\006\010\uffb7\011\uffb7\001\002\000\006\010\036\011\037" +
    "\001\002\000\006\010\uffb8\011\uffb8\001\002\000\010\007" +
    "\uffb9\014\uffb9\022\uffb9\001\002\000\004\002\uffff\001\002" +
    "\000\004\007\042\001\002\000\004\037\043\001\002\000" +
    "\004\043\044\001\002\000\106\004\064\006\072\011\074" +
    "\012\050\013\075\014\073\015\106\016\067\017\071\020" +
    "\111\021\046\023\055\026\110\027\053\030\061\031\103" +
    "\032\065\033\047\034\107\035\105\036\104\037\060\040" +
    "\112\041\062\042\056\043\045\044\101\045\054\046\077" +
    "\047\052\050\051\051\070\052\076\053\066\001\002\000" +
    "\010\011\uffde\023\uffde\024\uffde\001\002\000\010\011\uffd4" +
    "\023\uffd4\024\uffd4\001\002\000\010\011\uffec\023\uffec\024" +
    "\uffec\001\002\000\010\011\uffe2\023\uffe2\024\uffe2\001\002" +
    "\000\010\011\uffd8\023\uffd8\024\uffd8\001\002\000\010\011" +
    "\uffd9\023\uffd9\024\uffd9\001\002\000\010\011\ufff0\023\ufff0" +
    "\024\ufff0\001\002\000\010\011\uffdb\023\uffdb\024\uffdb\001" +
    "\002\000\010\011\uffe6\023\uffe6\024\uffe6\001\002\000\010" +
    "\011\uffdf\023\uffdf\024\uffdf\001\002\000\010\011\uffd0\023" +
    "\uffd0\024\uffd0\001\002\000\010\011\uffe5\023\uffe5\024\uffe5" +
    "\001\002\000\010\011\uffef\023\uffef\024\uffef\001\002\000" +
    "\010\011\uffe0\023\uffe0\024\uffe0\001\002\000\010\011\ufff2" +
    "\023\ufff2\024\116\001\002\000\010\011\uffd1\023\uffd1\024" +
    "\uffd1\001\002\000\010\011\uffed\023\uffed\024\uffed\001\002" +
    "\000\010\011\uffcf\023\uffcf\024\uffcf\001\002\000\010\011" +
    "\uffe7\023\uffe7\024\uffe7\001\002\000\010\011\uffd7\023\uffd7" +
    "\024\uffd7\001\002\000\010\011\uffe4\023\uffe4\024\uffe4\001" +
    "\002\000\010\011\uffd2\023\uffd2\024\uffd2\001\002\000\010" +
    "\011\uffd3\023\uffd3\024\uffd3\001\002\000\010\011\uffe1\023" +
    "\uffe1\024\uffe1\001\002\000\010\011\uffd5\023\uffd5\024\uffd5" +
    "\001\002\000\010\011\uffd6\023\uffd6\024\uffd6\001\002\000" +
    "\010\011\uffda\023\uffda\024\uffda\001\002\000\004\011\115" +
    "\001\002\000\010\011\uffdc\023\uffdc\024\uffdc\001\002\000" +
    "\006\011\ufff5\023\113\001\002\000\010\011\uffee\023\uffee" +
    "\024\uffee\001\002\000\010\011\uffe9\023\uffe9\024\uffe9\001" +
    "\002\000\010\011\uffea\023\uffea\024\uffea\001\002\000\010" +
    "\011\uffe8\023\uffe8\024\uffe8\001\002\000\010\011\uffeb\023" +
    "\uffeb\024\uffeb\001\002\000\010\011\ufff1\023\ufff1\024\ufff1" +
    "\001\002\000\010\011\uffdd\023\uffdd\024\uffdd\001\002\000" +
    "\010\011\uffe3\023\uffe3\024\uffe3\001\002\000\106\004\064" +
    "\006\072\011\074\012\050\013\075\014\073\015\106\016" +
    "\067\017\071\020\111\021\046\023\055\026\110\027\053" +
    "\030\061\031\103\032\065\033\047\034\107\035\105\036" +
    "\104\037\060\040\112\041\062\042\056\043\045\044\101" +
    "\045\054\046\077\047\052\050\051\051\070\052\076\053" +
    "\066\001\002\000\006\011\ufff3\023\ufff3\001\002\000\012" +
    "\007\ufff6\014\ufff6\022\ufff6\032\ufff6\001\002\000\106\004" +
    "\064\006\072\011\074\012\050\013\075\014\073\015\106" +
    "\016\067\017\071\020\111\021\046\023\055\026\110\027" +
    "\053\030\061\031\103\032\065\033\047\034\107\035\105" +
    "\036\104\037\060\040\112\041\062\042\056\043\045\044" +
    "\101\045\054\046\077\047\052\050\051\051\070\052\076" +
    "\053\066\001\002\000\004\011\ufff4\001\002\000\004\032" +
    "\127\001\002\000\006\022\015\032\122\001\002\000\004" +
    "\032\123\001\002\000\004\032\124\001\002\000\004\032" +
    "\125\001\002\000\004\007\027\001\002\000\006\007\027" +
    "\014\ufffb\001\002\000\004\032\130\001\002\000\004\032" +
    "\131\001\002\000\006\007\027\022\015\001\002\000\006" +
    "\007\027\022\015\001\002\000\006\007\027\022\015\001" +
    "\002\000\006\007\027\014\ufffa\001\002\000\006\014\ufff9" +
    "\022\015\001\002\000\004\043\137\001\002\000\014\015" +
    "\143\016\142\017\141\020\140\021\146\001\002\000\022" +
    "\010\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\025" +
    "\uffbd\053\uffbd\001\002\000\022\010\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\025\uffbf\053\uffbf\001\002\000" +
    "\022\010\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\025\uffbe\053\uffbe\001\002\000\022\010\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\025\uffc0\053\uffc0\001\002" +
    "\000\016\011\162\015\143\016\142\017\141\020\140\021" +
    "\146\001\002\000\022\010\152\015\143\016\142\017\141" +
    "\020\140\021\146\025\156\053\155\001\002\000\022\010" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\025\uffbc" +
    "\053\uffbc\001\002\000\022\010\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\025\uffc1\053\uffc1\001\002\000\022" +
    "\010\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\025" +
    "\uffc2\053\uffc2\001\002\000\020\011\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\025\160\001\002\000\020\010" +
    "\uffc3\011\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\001\002\000\020\010\157\011\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\001\002\000\016\011\uffca\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\001\002\000\016\011" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\001\002" +
    "\000\020\011\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021" +
    "\uffc5\025\uffc5\001\002\000\020\010\uffc4\011\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\001\002\000\020\011" +
    "\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\025\uffc6" +
    "\001\002\000\022\010\152\015\143\016\142\017\141\020" +
    "\140\021\146\025\156\053\155\001\002\000\010\007\uffcc" +
    "\022\uffcc\032\uffcc\001\002\000\016\011\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\010\002\005\003\006\026\003\001\001\000" +
    "\002\001\001\000\014\004\015\006\016\007\010\013\013" +
    "\014\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\120\007\010\014\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\017\013\020" +
    "\014\011\001\001\000\002\001\001\000\004\014\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\030\024\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\031\001\001" +
    "\000\002\001\001\000\004\025\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\056\010\077\011\062\012\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\056\011\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\056\011\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\125" +
    "\024\027\001\001\000\004\024\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\132\007\010\023\131" +
    "\024\027\001\001\000\010\006\134\007\010\024\031\001" +
    "\001\000\010\007\017\023\133\024\027\001\001\000\004" +
    "\024\031\001\001\000\004\007\017\001\001\000\002\001" +
    "\001\000\010\015\143\016\144\017\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\160\017\146\001\001\000\012\017\147" +
    "\020\153\021\150\022\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\147\020\162\021\150\022\152\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public static Nodo raiz;
   public static int contador = 1;
   public static String resultado = "";
   public static LinkedList<TError> TablaES = new LinkedList<TError>();
    // Variables para identificadores de conjuntos
    // public static StringBuilder valorConjuntoSB =  new StringBuilder();
//     public static LinkedList<Conjunto> listaConjuntos = new LinkedList<Conjunto>();
// //    public static LinkedList<Conjunto> listaConjuntos;
// //    public static LinkedList<String> listaValoresConjuntos = new LinkedList<String>();
// //    public static Stack<String> identificadoresConjuntos = new Stack<String>();
// //    public static Conjunto conjunto_temporal;
//     public static int contador_conjuntos = 0;
//     // ::::::::::::::::::::::::::::     EXPRESIONES       ::::::::::::::::::::::::::::
//     public static LinkedList<Expresion> listaExpresiones = new LinkedList<Expresion>();
// //    public static LinkedList<Expresion> listaExpresiones;
//     public static int contador_expresiones = 0;
//     // ::::::::::::::::::::::::::::     LEXEMAS       ::::::::::::::::::::::::::::
//     public static LinkedList<Lexema> listaLexemas = new LinkedList<Lexema>();
// //    public static LinkedList<Lexema> listaLexemas;    
//     public static int contador_lexemas = 0;
    
    //-------------------------------------------   Graficar arbol  ---------------------------------------------
    public static void graficarArbol(Nodo act, String nombre){
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("C:\\Users\\G\\Desktop\\" + nombre + ".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph G{");
            pw.println("rankdir=UD");
            pw.println("node[shape=box]");
            pw.println("concentrate=true");
            pw.println(act.getCodigoInterno());
            pw.println("}");
        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo");
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
            String dotPath = "C:\\Program Files\\Graphviz\\bin\\dot.exe";
            //dirección del archivo dot
            String fileInputPath = "C:\\Users\\erick\\OneDrive\\Escritorio\\" + nombre + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "C:\\Users\\erick\\OneDrive\\Escritorio\\" +nombre+ ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }

   //-----------------------------------------para errores sintacticos-------------------------------------------------------------------------------------------
   // Metodo para errores sintacticos
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.err.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.err.println("\t\tLexema: " + lexema);
        System.err.println("\t\tFila: " + fila);
        System.err.println("\t\tColumna: " + columna);

        TError datos = new TError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado.");
        TablaES.add(datos);
    }
    // Metodo llamado, en caso no se puede recuperar del error.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.err.println("!!!!!!! Error Sintactico, MODO PANICO !!!!!!!");
        System.err.println("\t\tLexema: " + lexema);
        System.err.println("\t\tFila: " + fila);
        System.err.println("\t\tColumna: " + columna);

        TError datos = new TError(lexema, fila, columna, "Error Sintactico", "F. Caracter no esperado.");
        TablaES.add(datos);
    }
    //-------------------------------------------------------------------------------------------------------------------------------------------


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


    

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO 
            {
              Object RESULT =null;
		int inicio_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inicio_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object inicio_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                // Pantalla_principal.list_of_names += inicio_;
                                // Nodo nuevo_nodo = new Nodo(null, null, "INICIO",);
                                // nuevo_nodo.Hijos.add((Nodo) inicio_);
                                // parser.raiz = (Nodo) inicio_;
                                // resultado = (String) inicio_;
                                // graficarArbol(inicio_, "testArbol");
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= llaveA ESTRUCTURA_CUERPO llaveC 
            {
              Object RESULT =null;
		int estructura_cuerpo_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int estructura_cuerpo_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object estructura_cuerpo_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                // Nodo nuevo_nodo = new Nodo("CUERPO");
                                // nuevo_nodo.Hijos.add((Nodo) cuerpo_);
                                // RESULT = nuevo_nodo;
                                // RESULT = estructura_cuerpo_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= ERROR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESTRUCTURA_CUERPO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESTRUCTURA_CUERPO ::= CONJUNTO EXPRESION porcentaje porcentaje porcentaje porcentaje LEXEMA 
            {
              Object RESULT =null;
		int conjunto_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int conjunto_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object conjunto_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expresion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expresion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object expresion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                                // Nodo nuevo_nodo = new Nodo("ESTRUCTURA_CUERPO");
                                // nuevo_nodo.Hijos.add((Nodo) es_cuerpo);
                                // RESULT = nuevo_nodo;
                                // RESULT = (Nodo) conjunto_;
                                // RESULT = expresion_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ESTRUCTURA_CUERPO ::= EXPRESION CONJUNTO porcentaje porcentaje porcentaje porcentaje LEXEMA 
            {
              Object RESULT =null;
		int expresion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expresion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object expresion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int conjunto_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int conjunto_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object conjunto_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                                // Nodo nuevo_nodo = new Nodo("ESTRUCTURA_CUERPO");
                                // nuevo_nodo.Hijos.add((Nodo) es_cuerpo);
                                // RESULT = nuevo_nodo;
                                // RESULT = expresion_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESTRUCTURA_CUERPO ::= EXPRESION porcentaje porcentaje porcentaje porcentaje CONJUNTO LEXEMA 
            {
              Object RESULT =null;
		int expresion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expresion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object expresion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int conjunto_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int conjunto_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object conjunto_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                // Nodo nuevo_nodo = new Nodo("ESTRUCTURA_CUERPO");
                                // nuevo_nodo.Hijos.add((Nodo) es_cuerpo);
                                // RESULT = nuevo_nodo;
                                // RESULT = expresion_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURA_CUERPO ::= EXPRESION porcentaje porcentaje porcentaje porcentaje LEXEMA CONJUNTO 
            {
              Object RESULT =null;
		int expresion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expresion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object expresion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int conjunto_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conjunto_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object conjunto_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                // Nodo nuevo_nodo = new Nodo("ESTRUCTURA_CUERPO");
                                // nuevo_nodo.Hijos.add((Nodo) es_cuerpo);
                                // RESULT = nuevo_nodo;
                                // RESULT = expresion_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONJUNTO ::= CONJUNTO ESTRUCTURA_CONJUNTO 
            {
              Object RESULT =null;
		int es_conj_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int es_conj_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object es_conj_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                // Nodo nuevo_nodo = new Nodo("CONJUNTO");
                                // nuevo_nodo.Hijos.add((Nodo) conjunto_);
                                // nuevo_nodo.Hijos.add((Nodo) es_conj);
                                // RESULT = nuevo_nodo;
                                //  RESULT = es_conj_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONJUNTO ::= ESTRUCTURA_CONJUNTO 
            {
              Object RESULT =null;
		int es_conj_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int es_conj_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object es_conj_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                // Nodo nuevo_nodo = new Nodo(null, null, "CONJUNTO", parser.contador);
                                // parser.contador++;
                                // nuevo_nodo.Hijos.add((Nodo) es_conj);
                                // RESULT = nuevo_nodo;
                                // RESULT = es_conj_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURA_CONJUNTO ::= PR_conjunto dosPuntos identificador guion mayorQue LISTA_CONJUNTOS puntoComa 
            {
              Object RESULT =null;
		int identificador_conjuntoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int identificador_conjuntoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String identificador_conjunto = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lista_conjuntos_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lista_conjuntos_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String lista_conjuntos_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                // Nodo nuevo_identificador_conjunto = new Nodo(null, null, String.valueOf(identificador_arbol), parser.contador);
                                // parser.contador++;
                                // RESULT = nuevo_identificador_conjunto;
                                
                                // ********************     Obteniendo conjuntos    ********************
                                StringBuilder temp_conj = new StringBuilder();
                                temp_conj.append(lista_conjuntos_);
                                System.out.println("\nConjunto reconocido: " + temp_conj.toString() + "\n");
                                Instancias.listaConjuntos.add(new Conjunto(Instancias.contador_conjuntos, identificador_conjunto, temp_conj.toString()));
                                Instancias.contador_conjuntos++;
                                // RESULT = lista_conjuntos_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CONJUNTO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_CONJUNTOS ::= CONJUNTO_COMA 
            {
              String RESULT =null;
		int conjunto_coma_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conjunto_coma_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String conjunto_coma_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = conjunto_coma_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_CONJUNTOS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_CONJUNTOS ::= TIPO_CARACTER tilde TIPO_CARACTER 
            {
              String RESULT =null;
		int tipo_caracter_izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipo_caracter_izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tipo_caracter_izq = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tilde_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tilde_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tilde_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tipo_caracter_derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipo_caracter_derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo_caracter_der = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = tipo_caracter_izq + tilde_ + tipo_caracter_der;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_CONJUNTOS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONJUNTO_COMA ::= CONJUNTO_COMA coma TIPO_CARACTER 
            {
              String RESULT =null;
		int tipo_caracter_izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipo_caracter_izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tipo_caracter_izq = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int coma_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int coma_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String coma_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tipo_caracter_derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipo_caracter_derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo_caracter_der = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = tipo_caracter_izq + coma_ + tipo_caracter_der;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_COMA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONJUNTO_COMA ::= TIPO_CARACTER 
            {
              String RESULT =null;
		int tipo_caracter_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tipo_caracter_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tipo_caracter_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = tipo_caracter_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_COMA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CARACTERES ::= admiracion 
            {
              String RESULT =null;
		int admiracion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int admiracion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String admiracion_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = admiracion_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CARACTERES ::= comillasDobles 
            {
              String RESULT =null;
		int comillasDobles_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comillasDobles_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String comillasDobles_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = comillasDobles_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CARACTERES ::= numeral 
            {
              String RESULT =null;
		int numeral_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numeral_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String numeral_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = numeral_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CARACTERES ::= dolar 
            {
              String RESULT =null;
		int dolar_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dolar_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dolar_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = dolar_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CARACTERES ::= porcentaje 
            {
              String RESULT =null;
		int porcentaje_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int porcentaje_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String porcentaje_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = porcentaje_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CARACTERES ::= ampersand 
            {
              String RESULT =null;
		int ampersand_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ampersand_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ampersand_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = ampersand_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CARACTERES ::= comillaSimple 
            {
              String RESULT =null;
		int comillaSimple_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int comillaSimple_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String comillaSimple_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = comillaSimple_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CARACTERES ::= parentesisA 
            {
              String RESULT =null;
		int parentesisA_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parentesisA_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String parentesisA_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = parentesisA_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CARACTERES ::= parentesisC 
            {
              String RESULT =null;
		int parentesisC_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parentesisC_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String parentesisC_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = parentesisC_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CARACTERES ::= asterisco 
            {
              String RESULT =null;
		int asterisco_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asterisco_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String asterisco_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = asterisco_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CARACTERES ::= mas 
            {
              String RESULT =null;
		int mas_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mas_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mas_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = mas_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CARACTERES ::= coma 
            {
              String RESULT =null;
		int coma_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int coma_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String coma_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = coma_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CARACTERES ::= guion 
            {
              String RESULT =null;
		int guion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int guion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String guion_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = guion_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CARACTERES ::= punto 
            {
              String RESULT =null;
		int punto_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int punto_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String punto_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = punto_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CARACTERES ::= diagonal 
            {
              String RESULT =null;
		int diagonal_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int diagonal_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String diagonal_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = diagonal_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CARACTERES ::= dosPuntos 
            {
              String RESULT =null;
		int dosPuntos_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dosPuntos_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dosPuntos_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = dosPuntos_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CARACTERES ::= puntoComa 
            {
              String RESULT =null;
		int puntoComa_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int puntoComa_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String puntoComa_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = puntoComa_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CARACTERES ::= menorQue 
            {
              String RESULT =null;
		int menorQue_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int menorQue_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String menorQue_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = menorQue_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CARACTERES ::= igual 
            {
              String RESULT =null;
		int igual_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int igual_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String igual_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = igual_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CARACTERES ::= mayorQue 
            {
              String RESULT =null;
		int mayorQue_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mayorQue_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mayorQue_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = mayorQue_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CARACTERES ::= interrogacion 
            {
              String RESULT =null;
		int interrogacion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int interrogacion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String interrogacion_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = interrogacion_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CARACTERES ::= arroba 
            {
              String RESULT =null;
		int arroba_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arroba_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String arroba_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = arroba_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CARACTERES ::= corcheteA 
            {
              String RESULT =null;
		int corcheteA_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int corcheteA_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String corcheteA_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = corcheteA_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CARACTERES ::= diagonalInversa 
            {
              String RESULT =null;
		int diagonalInversa_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int diagonalInversa_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String diagonalInversa_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = diagonalInversa_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CARACTERES ::= corcheteC 
            {
              String RESULT =null;
		int corcheteC_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int corcheteC_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String corcheteC_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = corcheteC_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CARACTERES ::= acentoCircunflejo 
            {
              String RESULT =null;
		int acentoCircunflejo_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acentoCircunflejo_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String acentoCircunflejo_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = acentoCircunflejo_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CARACTERES ::= guionBajo 
            {
              String RESULT =null;
		int guionBajo_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int guionBajo_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String guionBajo_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = guionBajo_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CARACTERES ::= acentoGrave 
            {
              String RESULT =null;
		int acentoGrave_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int acentoGrave_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String acentoGrave_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = acentoGrave_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CARACTERES ::= llaveA 
            {
              String RESULT =null;
		int llaveA_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llaveA_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String llaveA_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = llaveA_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CARACTERES ::= orBooleana 
            {
              String RESULT =null;
		int orBooleana_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orBooleana_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String orBooleana_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = orBooleana_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CARACTERES ::= llaveC 
            {
              String RESULT =null;
		int llaveC_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llaveC_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String llaveC_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = llaveC_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CARACTERES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_CARACTER ::= letras 
            {
              String RESULT =null;
		int letras_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int letras_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String letras_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = letras_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_CARACTER",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_CARACTER ::= numero 
            {
              String RESULT =null;
		int numero_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numero_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String numero_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = numero_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_CARACTER",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_CARACTER ::= CARACTERES 
            {
              String RESULT =null;
		int caracteres_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caracteres_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String caracteres_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = caracteres_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_CARACTER",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_CARACTER ::= caracteresEspeciales 
            {
              String RESULT =null;
		int caracteresEspeciales_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caracteresEspeciales_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String caracteresEspeciales_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = caracteresEspeciales_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_CARACTER",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION ESTRUCTURA_EXPRESION 
            {
              Object RESULT =null;
		int es_expresion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int es_expresion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object es_expresion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = es_expresion_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= ESTRUCTURA_EXPRESION 
            {
              Object RESULT =null;
		int es_expresion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int es_expresion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object es_expresion_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = es_expresion_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ESTRUCTURA_EXPRESION ::= identificador guion mayorQue LISTA_EXPRESIONES puntoComa 
            {
              Object RESULT =null;
		int identificador_expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int identificador_expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String identificador_expresion = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lista_expresiones_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lista_expresiones_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String lista_expresiones_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                // ********************     Obteniendo expresiones    ********************
                                StringBuilder temp_exp = new StringBuilder();
                                temp_exp.append(lista_expresiones_);
                                System.out.println("\nExpresion reconocida: " + temp_exp.toString() + "\n");
                                Instancias.listaExpresiones.add(new Expresion(Instancias.contador_expresiones, identificador_expresion, temp_exp.toString()));
                                Instancias.contador_expresiones++;
                                RESULT = lista_expresiones_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_EXPRESION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES TIPO_OPERACION VALOR_EXPRESION 
            {
              String RESULT =null;
		int tipo_operacion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipo_operacion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo_operacion_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor_expresion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_expresion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor_expresion_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = tipo_operacion_ + valor_expresion_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTA_EXPRESIONES ::= TIPO_OPERACION VALOR_EXPRESION 
            {
              String RESULT =null;
		int tipo_operacion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipo_operacion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tipo_operacion_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valor_expresion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_expresion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor_expresion_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = tipo_operacion_ + valor_expresion_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_EXPRESIONES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALOR_EXPRESION ::= VALOR_ID 
            {
              String RESULT =null;
		int valor_id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor_id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = valor_id_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALOR_EXPRESION ::= VALOR_CHAR 
            {
              String RESULT =null;
		int valor_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor_char_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = valor_char_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALOR_EXPRESION ::= caracteresEspeciales 
            {
              String RESULT =null;
		int esp_char_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esp_char_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String esp_char_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = esp_char_ ;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALOR_ID ::= VALOR_ID valorIDConjunto 
            {
              String RESULT =null;
		int valor_id_conj_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_id_conj_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor_id_conj_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = valor_id_conj_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_ID",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALOR_ID ::= valorIDConjunto 
            {
              String RESULT =null;
		int valor_id_conj_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valor_id_conj_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String valor_id_conj_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = valor_id_conj_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_ID",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALOR_CHAR ::= VALOR_CHAR cadena 
            {
              String RESULT =null;
		int cadena_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadena_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = cadena_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_CHAR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALOR_CHAR ::= cadena 
            {
              String RESULT =null;
		int cadena_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadena_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = cadena_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_CHAR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO_OPERACION ::= TIPO_OPERACION OPERADOR 
            {
              String RESULT =null;
		int operador_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operador_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String operador_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = operador_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO_OPERACION ::= OPERADOR 
            {
              String RESULT =null;
		int operador_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int operador_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String operador_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = operador_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_OPERACION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERADOR ::= asterisco 
            {
              String RESULT =null;
		int asterico_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asterico_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String asterico_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = asterico_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERADOR ::= punto 
            {
              String RESULT =null;
		int punto_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int punto_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String punto_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = punto_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERADOR ::= mas 
            {
              String RESULT =null;
		int mas_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mas_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String mas_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = mas_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERADOR ::= interrogacion 
            {
              String RESULT =null;
		int interrogacion_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int interrogacion_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String interrogacion_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = interrogacion_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERADOR ::= orBooleana 
            {
              String RESULT =null;
		int orBooleana_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orBooleana_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String orBooleana_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = orBooleana_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LEXEMA ::= LEXEMA ESTRUCTURA_LEXEMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LEXEMA",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LEXEMA ::= ESTRUCTURA_LEXEMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LEXEMA",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ESTRUCTURA_LEXEMA ::= identificador dosPuntos LISTA_LEXEMAS puntoComa 
            {
              Object RESULT =null;
		int identificador_lexemaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identificador_lexemaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String identificador_lexema = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lista_lexemas_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lista_lexemas_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista_lexemas_ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                // ********************     Obteniendo lexemas    ********************
                                StringBuilder temp_lex = new StringBuilder();
                                temp_lex.append(lista_lexemas_);
                                System.out.println("\nLexema reconocido: " + temp_lex.toString() + "\n");
                                Instancias.listaLexemas.add(new Lexema(Instancias.contador_lexemas, identificador_lexema, temp_lex.toString()));
                                Instancias.contador_lexemas++;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_LEXEMA",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LISTA_LEXEMAS ::= LISTA_LEXEMAS cadena 
            {
              Object RESULT =null;
		int cadena_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadena_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = cadena_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_LEXEMAS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LISTA_LEXEMAS ::= cadena 
            {
              Object RESULT =null;
		int cadena_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadena_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cadena_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = cadena_;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_LEXEMAS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
